#!/bin/bash

# Backup script for homelab docker directory
# Usage: backup_homelab_docker [destination_directory]

set -euo pipefail

# Default backup destination
DEFAULT_BACKUP_DIR="$HOME/Backups/homelab-docker"
BACKUP_DIR="${1:-$DEFAULT_BACKUP_DIR}"
SSH_HOST="homelab"
REMOTE_DIR="/home/carosi/docker"

# Directories to exclude from backup
EXCLUDE_DIRS=(
  "docker/immich/encoded-video"
  "docker/immich/thumbs"
)

# Number of backups to keep
BACKUPS_TO_KEEP=2

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Setup logging
LOG_FILE="$BACKUP_DIR/backup.log"

# Function to log with timestamp
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Generate timestamp for backup
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="docker_backup_${TIMESTAMP}.tar.gz"
BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"

# Cleanup function for signal handling
cleanup() {
  log "Backup interrupted, cleaning up..."
  rm -f "$BACKUP_PATH"
  exit 1
}

# Trap signals to cleanup incomplete backup files
trap cleanup SIGINT SIGTERM SIGKILL

log "Starting backup of $SSH_HOST:$REMOTE_DIR"
log "Backup destination: $BACKUP_PATH"

# Build exclude arguments for tar
EXCLUDE_ARGS=""
for dir in "${EXCLUDE_DIRS[@]}"; do
  EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=$dir"
done

# Create compressed backup via SSH with exclusions
log "Connecting to $SSH_HOST and creating backup..."
log "Excluding: ${EXCLUDE_DIRS[*]}"
TAR_CMD="cd /home/carosi && tar --ignore-failed-read -czf -${EXCLUDE_ARGS} docker/"
if ssh "$SSH_HOST" "$TAR_CMD" >"$BACKUP_PATH" 2>>"$LOG_FILE"; then
  log "Backup completed successfully: $BACKUP_PATH"
  log "Backup size: $(du -h "$BACKUP_PATH" | cut -f1)"

  # Keep only the last N backups (exclude log file)
  log "Cleaning up old backups (keeping last $BACKUPS_TO_KEEP)..."
  cd "$BACKUP_DIR"
  CLEANUP_AFTER=$((BACKUPS_TO_KEEP + 1))
  gfind . -name "docker_backup_*.tar.gz" -type f -printf '%T@ %p\n' | sort -nr | tail -n +"$CLEANUP_AFTER" | cut -d' ' -f2- | xargs -r rm -f

  log "Remaining backups:"
  if gfind . -name "docker_backup_*.tar.gz" -type f -exec ls -lah {} \; 2>/dev/null | tee -a "$LOG_FILE"; then
    :
  else
    log "No other backups found"
  fi
  log "Backup process completed successfully"
else
  log "ERROR: Backup failed!"
  rm -f "$BACKUP_PATH"
  exit 1
fi

#!/bin/bash

set -euo pipefail

# Script name: chdocker

# Usage: chdocker [local|desktop]

# Description:  This script changes the DOCKER_HOST environment variable
#               and persists the change across shell sessions.
#               It replaces any existing DOCKER_HOST definition in the
#               shell startup files.

# Argument check
if [ $# -ne 1 ]; then
  echo "Usage: $0 [local|desktop]"
  exit 1
fi

# Determine the desired DOCKER_HOST value based on the argument
case "$1" in
  local)
    DOCKER_HOST="" # Empty variable defaults to localhost
    ;;
  desktop)
    DOCKER_HOST="ssh://desktop"
    ;;
  *)
    echo "Invalid argument: $1"
    echo "Usage: $0 [local|desktop]"
    exit 1
    ;;
esac

# Function to update a shell startup file
update_shell_config() {
  local file="$1"
  local docker_line='export DOCKER_HOST="'"$DOCKER_HOST"'"'
  local resolved_file
  local escaped_docker_line

  # Resolve the symlink to the actual file.
  resolved_file=$(realpath "$file")

  if [ -z "$resolved_file" ]; then
    echo "Error: Could not resolve symlink: $file"
    return
  fi

  if [ -f "$resolved_file" ]; then
    # Escape special characters in the docker_line for sed.
    escaped_docker_line=$(printf '%s\n' "$docker_line" | sed 's/[\/&]/\\&/g')

    # Replace the line if it exists, otherwise append it.
    if grep -q "^export DOCKER_HOST=" "$resolved_file"; then
      # Replace existing line
      sed -i '' "s/^export DOCKER_HOST=.*/${escaped_docker_line}/" "$resolved_file"
      echo "Replaced DOCKER_HOST in $file (resolved to $resolved_file)"
    else
      # Append to the end if it doesn't exist
      echo "$docker_line" >>"$resolved_file"
      echo "Appended DOCKER_HOST to $file (resolved to $resolved_file)"
    fi
  else
    echo "Warning: File does not exist: $file (resolved to $resolved_file)"
  fi
}

# Update common shell startup files
update_shell_config "$HOME/.zsh_env.sh"

# Set the DOCKER_HOST variable in the current shell.  This is only for the
# *current* shell session, to take effect immediately.  The changes to
# shell startup files ensure future shells will also inherit the setting.
export DOCKER_HOST="$DOCKER_HOST"

# Print a confirmation message
if [ -z "$DOCKER_HOST" ]; then
  echo "DOCKER_HOST set to default (localhost) for this and future shell sessions."
else
  echo "DOCKER_HOST set to '$DOCKER_HOST' for this and future shell sessions."
fi

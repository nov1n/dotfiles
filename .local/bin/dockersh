#!/usr/bin/env bash

# Show usage if no container name provided
if [ $# -eq 0 ]; then
  printf "Usage: %s CONTAINER_NAME\n" "$0"
  printf "Attempts to get a shell in a container using multiple methods\n\n"
  printf "Example: %s my-nginx\n" "$0"
  exit 1
fi

CONTAINER_NAME=$1
TEMP_DIR=$(mktemp -d)

# Busybox binaries for different architectures
declare -A BUSYBOX_URLS=(
  ["x86_64"]="https://busybox.net/downloads/binaries/1.35.0-x86_64-linux-musl/busybox"
  ["aarch64"]="https://busybox.net/downloads/binaries/1.35.0-aarch64-linux-musl/busybox"
  ["armv7l"]="https://busybox.net/downloads/binaries/1.35.0-armv7l-linux-musleabihf/busybox"
)

# Clean up function
cleanup() {
  rm -rf "$TEMP_DIR"
}
trap cleanup EXIT

# Check if container exists and is running
if ! docker ps | grep -q "$CONTAINER_NAME"; then
  printf "Error: Container '%s' not found or not running\n" "$CONTAINER_NAME" >&2
  exit 1
fi

# Function to try existing shells
try_existing_shells() {
  printf "Trying existing shells...\n" >&2

  # Try bash
  if docker exec -it "$CONTAINER_NAME" which bash >/dev/null 2>&1; then
    printf "Found bash, connecting...\n" >&2
    docker exec -it "$CONTAINER_NAME" bash
    return 0
  fi

  # Try sh
  if docker exec -it "$CONTAINER_NAME" which sh >/dev/null 2>&1; then
    printf "Found sh, connecting...\n" >&2
    docker exec -it "$CONTAINER_NAME" sh
    return 0
  fi

  printf "No standard shells found\n" >&2
  return 1
}

# Function to detect container architecture
detect_arch() {
  # Try to detect architecture
  local detected_arch
  if ! detected_arch=$(docker exec "$CONTAINER_NAME" uname -m 2>/dev/null); then
    printf "Warning: Could not detect architecture\n" >&2
    return 1
  fi

  # Return detected arch if supported, otherwise empty string
  if [[ -n "${BUSYBOX_URLS[$detected_arch]}" ]]; then
    printf "%s" "$detected_arch"
  else
    printf "Warning: Unsupported architecture '%s'\n" "$detected_arch" >&2
    return 1
  fi
}

# Function to inject busybox
inject_busybox() {
  local arch
  arch=$(detect_arch)

  # Fallback to x86_64 if no architecture detected
  if [[ -z "$arch" ]]; then
    printf "Falling back to x86_64 architecture\n" >&2
    arch="x86_64"
  fi

  local busybox_url="${BUSYBOX_URLS[$arch]}"

  printf "Using architecture: %s\n" "$arch" >&2
  printf "Downloading static busybox binary...\n" >&2
  if ! wget -q "$busybox_url" -O "$TEMP_DIR/busybox"; then
    printf "Failed to download busybox\n" >&2
    return 1
  fi

  # Make busybox executable locally before copying
  chmod +x "$TEMP_DIR/busybox"

  printf "Copying busybox into container...\n" >&2
  if ! docker cp "$TEMP_DIR/busybox" "$CONTAINER_NAME:/tmp/busybox"; then
    printf "Failed to copy busybox into container\n" >&2
    return 1
  fi

  # Create a temporary directory for busybox tools
  printf "Setting up busybox environment...\n" >&2
  docker exec "$CONTAINER_NAME" /tmp/busybox mkdir -p /tmp/bin

  # Create symlinks for all busybox applets
  printf "Creating symlinks for all busybox applets...\n" >&2
  docker exec "$CONTAINER_NAME" /tmp/busybox sh -c '
        cd /tmp/bin
        for cmd in $(/tmp/busybox --list); do
            /tmp/busybox ln -sf /tmp/busybox "$cmd"
        done
    '

  printf "Starting busybox shell with enhanced PATH...\n" >&2
  docker exec -it "$CONTAINER_NAME" /tmp/busybox sh -c 'PATH=/tmp/bin:$PATH sh'
  return 0
}

# Main logic
printf "Attempting to get a shell in container: %s\n" "$CONTAINER_NAME" >&2

# Step 1: Try existing shells
if try_existing_shells; then
  exit 0
fi

# Step 2: Try injecting busybox
printf "Attempting to inject busybox...\n" >&2
if inject_busybox; then
  exit 0
fi
